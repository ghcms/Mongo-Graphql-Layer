//
//
// This here module is responsible for parsing the request and
// Returning the correct data.
//
//

import _ from "lodash";

import SchemaObject from '../../../query/object';            // [Namespace] //
import MongoService from '../database/mongo';                      // [Interface] //

import mapResponse from '../database/mapResponse';           // [Func] //
import mapQuery from '../database/mapQuery';                 // [Func] //

import { MongoResponseObject } from '../database/mongo'; // [Interface] //
import { RequestDetails } from '../..';                      // [Interface] //
import { ProjectionInterface } from "../database/parseQuery";

import SchemaValue from "../../../query/value";

const resolve = async(
    schemaObject:  SchemaObject.init,
    requestDetails: RequestDetails,
    client: MongoService
): Promise<MongoResponseObject> => {
    // Start building the projection
    let projection: ProjectionInterface = {};

    // Map the requested resouces
    for(const paramater in requestDetails.projection[requestDetails.individualName]){
        // Get the value
        const value = schemaObject.obj[paramater] as SchemaValue.init;

        // If the paramater is not found in the schema
        // It probably means that the user is trying to access a
        // that was generated by MGL, Such as IsUnique, IsRequired, etc.
        if(!value) {
            // If so, we can just generate the value here and continue
            const value = requestDetails.projection[requestDetails.individualName][paramater];

            console.log(value);
            continue;
        }

        // Merge the projections
        _.merge(projection, value.mask);
    }

    // Construct the projection
    const query: MongoResponseObject = mapQuery(
        requestDetails.arguments[requestDetails.individualName],
        schemaObject
    );

    const requestData: Array<{[x: string]: ProjectionInterface | MongoResponseObject}> = [
        { $project: projection },
        { $match: query }
    ];

    const collection = client.getCollection(schemaObject.options.databaseName, schemaObject.options.collectionName); 

    // Use the projection and query to get the data
    const data = await collection.aggregate(requestData).toArray();

    if(data.length === 0) return undefined;

    // Map the requested resouces back to the schema
    return mapResponse(schemaObject, data[0]);
}

export default resolve;