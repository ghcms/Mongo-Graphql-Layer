// This here module is responsible for parsing the request and
// Returning the correct data.

import _ from "lodash";

import SchemaObject from "../../../query/object";
import MongoService from '../database'

import mapResponse from '../database/mapResponse';
import mapQuery from '../database/mapQuery';

import { MongoResponseObject } from "../database/interface";
import { RequestDetails } from "../..";

const resolve = async(
    input:  SchemaObject.init,
    requestDetails: RequestDetails,
    client: MongoService
) => {
    // Get the collection
    const collection = client.getCollection(input.options.databaseName, input.options.collectionName);

    // Start building the projection
    let projection = {};

    // Map the requested resouces
    for(const paramater in requestDetails.projection[input.options.key]){
        // Get the value
        const value = input.obj[paramater];

        // If the paramater is not found in the schema
        // It probably means that the user is trying to access a
        // that was generated by MGL, Such as IsUnique, IsRequired, etc.
        if(!value) {
            // If so, we can just generate the value here and continue
            const value = requestDetails.projection[input.options.key][paramater];

            console.log(value);
            continue;
        }

        // Merge the projections
        _.merge(projection, value.mask);
    }

    // Construct the projection
    const query: MongoResponseObject = mapQuery(requestDetails.arguments, input);

    // Use the projection and query to get the data
    const data = await collection.aggregate([
        { $project: projection },
        { $match: query }
    ]).toArray();

    if(data.length === 0) return undefined;

    // Map the requested resouces back to the schema
    return mapResponse(input, data[0]);
}

export default resolve;